/*
Copyright 2019, Luis E Limon

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/llimon/churndr/pkg/apis/churndrcontroller/v1alpha1"
	scheme "github.com/llimon/churndr/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PodchurnsGetter has a method to return a PodchurnInterface.
// A group's client should implement this interface.
type PodchurnsGetter interface {
	Podchurns(namespace string) PodchurnInterface
}

// PodchurnInterface has methods to work with Podchurn resources.
type PodchurnInterface interface {
	Create(*v1alpha1.Podchurn) (*v1alpha1.Podchurn, error)
	Update(*v1alpha1.Podchurn) (*v1alpha1.Podchurn, error)
	UpdateStatus(*v1alpha1.Podchurn) (*v1alpha1.Podchurn, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Podchurn, error)
	List(opts v1.ListOptions) (*v1alpha1.PodchurnList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Podchurn, err error)
	PodchurnExpansion
}

// podchurns implements PodchurnInterface
type podchurns struct {
	client rest.Interface
	ns     string
}

// newPodchurns returns a Podchurns
func newPodchurns(c *ChurndrcontrollerV1alpha1Client, namespace string) *podchurns {
	return &podchurns{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the podchurn, and returns the corresponding podchurn object, and an error if there is any.
func (c *podchurns) Get(name string, options v1.GetOptions) (result *v1alpha1.Podchurn, err error) {
	result = &v1alpha1.Podchurn{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podchurns").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Podchurns that match those selectors.
func (c *podchurns) List(opts v1.ListOptions) (result *v1alpha1.PodchurnList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.PodchurnList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podchurns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested podchurns.
func (c *podchurns) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("podchurns").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a podchurn and creates it.  Returns the server's representation of the podchurn, and an error, if there is any.
func (c *podchurns) Create(podchurn *v1alpha1.Podchurn) (result *v1alpha1.Podchurn, err error) {
	result = &v1alpha1.Podchurn{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("podchurns").
		Body(podchurn).
		Do().
		Into(result)
	return
}

// Update takes the representation of a podchurn and updates it. Returns the server's representation of the podchurn, and an error, if there is any.
func (c *podchurns) Update(podchurn *v1alpha1.Podchurn) (result *v1alpha1.Podchurn, err error) {
	result = &v1alpha1.Podchurn{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podchurns").
		Name(podchurn.Name).
		Body(podchurn).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *podchurns) UpdateStatus(podchurn *v1alpha1.Podchurn) (result *v1alpha1.Podchurn, err error) {
	result = &v1alpha1.Podchurn{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podchurns").
		Name(podchurn.Name).
		SubResource("status").
		Body(podchurn).
		Do().
		Into(result)
	return
}

// Delete takes name of the podchurn and deletes it. Returns an error if one occurs.
func (c *podchurns) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podchurns").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *podchurns) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podchurns").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched podchurn.
func (c *podchurns) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Podchurn, err error) {
	result = &v1alpha1.Podchurn{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("podchurns").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
